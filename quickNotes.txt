This file contains quick some notes about React.

Steps to create a react app with vite:
1-> npm create vite@latest (to create the latest version of react application)
2-> select the framework and language to work with
3-> cd 'name of folder for the project'
4-> npm install 
5-> npm run dev


-> React is library of js not a framework.
-> React was a class based components language but now its a functional components based language.


Accessing Js in return statemnt:
-> to write html in return you need (), to write javascript in return statement you need {}.
similarly in order to access variables in return statement use {}

for eg: const food1 =  "Apple";
        const food2 = "Mango";

            return (
                    <ul>
                         <li>Grapes</li>
                        <li>{food1}</li>
                    </ul>
                     );


-> can use the components by making functions and calling them


-> in App.js we cannot return more than one tag at a time, loophole to this is to make a empty tag
and return every desired tag in that, calling the respective function in that order


-> With .jsx files we use 'className' to assign class to a tag rather than 'class'  keyword

-> Card component can be called for any numbr of times in the app, enclosed between the tags.

-> 3 ways to apply css styling:

   - External (single css file for all the classes)

   - Modules:
    (making specific folders and files for applying css)
    with modules their is no naming conflict possible, as it generates a hash value with 'module'.

   - In-Line Styling:
    prevent global conflicts as does not require importing files. 
    perfect for isolated components, with minimal styling.

-----------Props-------------


-> Props:
    read only properties shared between the components. 
    a parent component can send data to the child component in the form of key value pairs.

    other than string everything else need to be enclosed in a {} while passing key and value pair in app.js 

-> propTypes:   
    just ensures that the passed value is of the correct data type, otherwise will give error in console
    generally used for debugging purposes, wont stop the application from running
eg: 
List.propTypes = {
    category: PropTypes.string,
    items: PropTypes.arrayOf(PropTypes.shape({id: PropTypes.number, name: PropTypes.string, calories: PropTypes.string}))
}


-> Default Props:
    deafult values passed in the props incase tha parent component does not pass the value     
eg: 
List.defaultProps ={
    category: "Category",
    items: [],
}


------------Rendering and Rendering Lists--------------------

-> Conditional Rendering:
    gives control to what gets render in application based on certain conditions, like show hide or change components 


------------Side Note--------------
Alternative for if else statement is ternary operator in js
the eg is below:

    if(props.isLoggedIn){
         return (<h2>Welcome {props.userName}</h2>)
    }
    else {
     return <h2>Please log in to continue</h2>
    }

 or you can use the ternary operator in js

return (props.isLoggedIn ? <h2>Welcome {props.userName}</h2> : <h2>Please login to continue</h2>);

-----------side note---------------


-> Sorting in js using sort() function:

fruits.sort()//default sorting in ascending order 
fruits.sort((a,b) => a.name.localeCompare(b.name)); //Alphabatical 
fruits.sort((a,b)=> b.name.localeCompare(b.name)); //Reverse Alphabatical order
fruits.sort((a,b)=> a.cal-b.cal);// numerical order
fruits.sort((a,b)=> b.cal-a.cal);// reverse numerical order  


-> Filtering list items in js

const lowCalFruits = fruits.filter(fruit => fruit.cal < 100);//filter fruits with low calories than 100

-> Conditional Rendering:
only render lists if there are elements in the list:
{fruits.length>0 ? <List items= {fruits} category='Fruits'></List> : null}


---------------Rendering lists end-------------------


-----------------Click Events-------------------------

-> Click Event: An interaction when a user clicks on a specific element, can respond to click by 
passing a callback on the onClick event handler.

-> Conditional Click Event: 
eg: 
function Button(){

    let count  =0;
    const handleclick = (name) =>{
        if(count<3){
            count++;
            console.log(name+ ' you clicked me '+ count + ' time/s');
        }
        else{
            console.log(name+ ' stop clicking me');
        } 
    }
    

return(<>
<button onClick={() => handleclick("max")}>Click me</button>
</>);
}